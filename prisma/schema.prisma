// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // User preferences
  defaultModel         String  @default("docling")
  defaultZoom          Int     @default(100)
  enableAnnotations    Boolean @default(true)
  theme               String  @default("system")
  
  // Usage tracking
  totalDocuments      Int     @default(0)
  totalExtractions    Int     @default(0)
  storageUsed         BigInt  @default(0) // in bytes
  
  accounts Account[]
  sessions Session[]
  documents Document[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Custom models for document management
model Document {
  id          String   @id @default(cuid())
  userId      String
  filename    String
  originalName String
  fileSize    BigInt
  pageCount   Int
  mimeType    String
  uploadedAt  DateTime @default(now())
  
  // File storage
  storageKey  String   @unique
  storageUrl  String?
  
  // Processing status
  status      DocumentStatus @default(UPLOADED)
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  extractions Extraction[]
  
  @@index([userId, uploadedAt])
}

model Extraction {
  id            String    @id @default(cuid())
  documentId    String
  modelId       String    // docling, surya, mineru
  modelName     String
  
  // Processing details
  status        ExtractionStatus @default(PENDING)
  startedAt     DateTime  @default(now())
  completedAt   DateTime?
  processingTime Int?     // in seconds
  
  // Results
  markdownContent String?
  metadata       String?    // JSON metadata about extraction (stored as string in SQLite)
  elementCount   Int      @default(0)
  confidence     Float?
  
  // Storage for results
  resultsKey     String?  @unique
  annotatedImageUrl String?
  
  // Error handling
  errorMessage   String?
  retryCount     Int      @default(0)
  
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@index([documentId, modelId])
  @@index([status, startedAt])
}

enum DocumentStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
  DELETED
}

enum ExtractionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}